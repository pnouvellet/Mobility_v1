d_m$region[which(d_m$region %in% 'South Korea')] <- 'South_Korea'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Dominican Republic')] <- 'Dominican_Republic'
country <- names(input$D)[-1]
country2 <- country
country2[which(country2 %in% 'United_Kingdom')] <- 'UK'
country2[which(country2 %in% 'United_States_of_America')] <- 'USA'
country2[which(country2 %in% 'South_Korea')] <- 'South Korea'
country2[which(country2 %in% 'Saudi_Arabia')] <- 'Saudi Arabia'
country2[which(country2 %in% 'Dominican_Republic')] <- 'Dominican Rep.'
tab2 <- data.frame(country = country2,
death = colSums(input$D[,-1]),
mobility = rep(NA,length(country)),
mobilityXources = rep(NA,length(country) ))
for (i in 1:length(country)){
tab2$mobility[i] <- round(min(input$M[,i])*100,digits = 1)
tab2$mobilityXources[i] <- min(input$M[,i])
f <- which(d_m$region %in% country[i])
tab2$mobilityXources[i] <- length(f)
}
# write.csv(tab1,file='output/table1.csv')
View(tab1)
View(tab2)
View(tab1)
View(tab2)
tab <- merge(x = tab1, y = tab2, by = 'country', all = TRUE)
write.csv(tab,file='output/table1.csv')
write.csv(tab,file='Rdata/table1.csv')
View(tab)
tab <- tab[order(tab$country),c(1:4,6:7)]
View(tab)
order(tab$country)
tab <- tab[order(as.character(tab$country)),c(1:4,6:7)]
tab <- merge(x = tab1, y = tab2, by = 'country', all = TRUE)
tab <- tab[order(as.character(tab$country)),c(1:4,6:7)]
View(tab)
tab <- merge(x = tab1, y = tab2, by = list('country','deaths'), all = TRUE)
tab <- merge(x = tab1, y = tab2, by = list('country','death'), all = TRUE)
tab <- merge(x = tab1, y = tab2, by = list(c('country','death')), all = TRUE)
tab <- merge(x = tab1, y = tab2, by = 'country', all = TRUE)
which(is.na(tab$death.x))
tab$death.x[which(is.na(tab$death.x))] <- tab$death.y[which(is.na(tab$death.x))]
tab <- tab[order(as.character(tab$country)),c(1:4,6:7)]
View(tab)
write.csv(tab,file='Rdata/table1.csv')
tab <- merge(x = tab1, y = tab2, by = 'country', all = TRUE)
tab$death.x[which(is.na(tab$death.x))] <- tab$death.y[which(is.na(tab$death.x))]
tab <- tab[order(as.character(tab$country)),c(1:3,6,4,7)]
write.csv(tab,file='Rdata/table1.csv')
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), fig.width=9, fig.height=6, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
sapply(paste0('Rscript/pre_MCMC/',(list.files('Rscript/pre_MCMC/'))),FUN = source)
date_week_finishing <-  as.Date('10/05/2020',format = '%d/%m/%Y')
si <- 2
d <- readRDS(file=paste0('../inputs/data_',date_week_finishing,'.rds'))
#
country <- as.character(d$Country)
# mean sd of ditrivution infection to death
mu_id = 18.8
si_std = .45*mu_id
d_m <- read.csv(file='../inputs/applemobilitytrends-2020-04-26.csv',stringsAsFactors = FALSE)
d_m <- read.csv(file='../inputs/applemobilitytrends-2020-05-16.csv',stringsAsFactors = FALSE)
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'Czech Republic')] <- 'Czechia'
d_m$region[which(d_m$region %in% 'UK')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Republic of Korea')] <- 'South_Korea'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
d_m <- read.csv(file='../inputs/applemobilitytrends-2020-05-16.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'Czech Republic')] <- 'Czechia'
d_m$region[which(d_m$region %in% 'UK')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Republic of Korea')] <- 'South_Korea'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
d_m <- read.csv(file='../inputs/applemobilitytrends-2020-05-16.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'Czech Republic')] <- 'Czechia'
d_m$region[which(d_m$region %in% 'UK')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Republic of Korea')] <- 'South_Korea'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# check
if (length(country[-which(country %in% d_m$region)])>0){
print('warning')
country[-which(country %in% d_m$region)]
}
# include country with data in both dataset
f1 <- which(country %in% d_m$region)
f2 <- which(d_m$region %in% country)
d_m <- d_m[f2,]
d$I_active_transmission <- d$I_active_transmission[,c(1,f1+1)]
d$D_active_transmission <- d$D_active_transmission[,c(1,f1+1)]
d$Country <- d$Country[f1]
# include dates with data in both
dates <- as.Date(substr(names(d_m[,-c(1:3)]),start = 2, stop = 11),format='%Y.%m.%d')
f1 <- which(d$I_active_transmission$dates %in% dates)
f2 <- which(dates %in% d$I_active_transmission$dates)
d_m <- d_m[,c(1,2,3,3+f2)]
d$I_active_transmission <- d$I_active_transmission[f1,]
d$D_active_transmission <- d$D_active_transmission[f1,]
# correct epi
D <- d$D_active_transmission
mD <- as.matrix(D[,-1])
I <- d$I_active_transmission
cumD <- data.frame(D$dates,apply(D[,-1],2,cumsum))
cumI <- data.frame(I$dates,apply(I[,-1],2,cumsum))
N_geo <- ncol(D)-1
N_days <- nrow(D)
country <- as.character(d$Country)
View(D)
date_week_finishing <-  as.Date('10/05/2020',format = '%d/%m/%Y')
si <- 2
d <- readRDS(file=paste0('../inputs/data_',date_week_finishing,'.rds'))
#
country <- as.character(d$Country)
# mean sd of ditrivution infection to death
mu_id = 18.8
si_std = .45*mu_id
# d_m <- read.csv(file='../inputs/applemobilitytrends-2020-04-26.csv',stringsAsFactors = FALSE)
d_m <- read.csv(file='../inputs/google.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'United Kingdom')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'South Korea')] <- 'South_Korea'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Dominican Republic')] <- 'Dominican_Republic'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# d_m <- read.csv(file='../inputs/applemobilitytrends-2020-04-26.csv',stringsAsFactors = FALSE)
d_m <- read.csv(file='../inputs/google.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'United Kingdom')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'South Korea')] <- 'South_Korea'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'Dominican Republic')] <- 'Dominican_Republic'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# d_m <- read.csv(file='../inputs/applemobilitytrends-2020-04-26.csv',stringsAsFactors = FALSE)
d_m <- read.csv(file='../inputs/google.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'United Kingdom')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'South Korea')] <- 'South_Korea'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'Dominican Republic')] <- 'Dominican_Republic'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# check
if (length(country[-which(country %in% d_m$region)])>0){
print('warning')
country[-which(country %in% d_m$region)]
}
# include country with data in both dataset
f1 <- which(country %in% d_m$region)
f2 <- which(d_m$region %in% country)
d_m <- d_m[f2,]
d$I_active_transmission <- d$I_active_transmission[,c(1,f1+1)]
d$D_active_transmission <- d$D_active_transmission[,c(1,f1+1)]
d$Country <- d$Country[f1]
# include dates with data in both
dates <- as.Date(substr(names(d_m[,-c(1:3)]),start = 2, stop = 11),format='%Y.%m.%d')
f1 <- which(d$I_active_transmission$dates %in% dates)
f2 <- which(dates %in% d$I_active_transmission$dates)
d_m <- d_m[,c(1,2,3,3+f2)]
d$I_active_transmission <- d$I_active_transmission[f1,]
d$D_active_transmission <- d$D_active_transmission[f1,]
# correct epi
D <- d$D_active_transmission
mD <- as.matrix(D[,-1])
I <- d$I_active_transmission
cumD <- data.frame(D$dates,apply(D[,-1],2,cumsum))
cumI <- data.frame(I$dates,apply(I[,-1],2,cumsum))
N_geo <- ncol(D)-1
N_days <- nrow(D)
country <- as.character(d$Country)
View(I)
library(rmarkdown)
source(file = 'Rdata/date_input.r')
library(rmarkdown)
source(file = 'Rdata/date_input.r')
for (date_num in 1:length(dates_input)){
for (si_num in c(1,2)){
date_week_finishing <-  as.Date(dates_input[date_num],format = '%Y-%m-%d')
si <- si_num
rmarkdown::render(input = 'template_input.Rmd',
output_file = paste0('input_',date_week_finishing,'_SI_',si,'.html'))
}
}
getwd()
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), fig.width=9, fig.height=6, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
sapply(paste0('Rscript/pre_MCMC/',(list.files('Rscript/pre_MCMC/'))),FUN = source)
# date_week_finishing <-  as.Date('10/05/2020',format = '%d/%m/%Y')
# si <- 2
d <- readRDS(file=paste0('../inputs/data_',date_week_finishing,'.rds'))
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), fig.width=9, fig.height=6, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
sapply(paste0('Rscript/pre_MCMC/',(list.files('Rscript/pre_MCMC/'))),FUN = source)
date_week_finishing <-  as.Date('10/05/2020',format = '%d/%m/%Y')
si <- 2
d <- readRDS(file=paste0('../inputs/data_',date_week_finishing,'.rds'))
#
country <- as.character(d$Country)
# mean sd of ditrivution infection to death
mu_id = 18.8
si_std = .45*mu_id
d_m <- read.csv(file='../inputs/applemobilitytrends-2020-05-16.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'Czech Republic')] <- 'Czechia'
d_m$region[which(d_m$region %in% 'UK')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'Republic of Korea')] <- 'South_Korea'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# check
if (length(country[-which(country %in% d_m$region)])>0){
print('warning')
country[-which(country %in% d_m$region)]
}
# include country with data in both dataset
f1 <- which(country %in% d_m$region)
f2 <- which(d_m$region %in% country)
d_m <- d_m[f2,]
d$I_active_transmission <- d$I_active_transmission[,c(1,f1+1)]
d$D_active_transmission <- d$D_active_transmission[,c(1,f1+1)]
d$Country <- d$Country[f1]
# include dates with data in both
dates <- as.Date(substr(names(d_m[,-c(1:3)]),start = 2, stop = 11),format='%Y.%m.%d')
f1 <- which(d$I_active_transmission$dates %in% dates)
f2 <- which(dates %in% d$I_active_transmission$dates)
d_m <- d_m[,c(1,2,3,3+f2)]
d$I_active_transmission <- d$I_active_transmission[f1,]
d$D_active_transmission <- d$D_active_transmission[f1,]
# correct epi
D <- d$D_active_transmission
mD <- as.matrix(D[,-1])
I <- d$I_active_transmission
cumD <- data.frame(D$dates,apply(D[,-1],2,cumsum))
cumI <- data.frame(I$dates,apply(I[,-1],2,cumsum))
N_geo <- ncol(D)-1
N_days <- nrow(D)
country <- as.character(d$Country)
mobility <- process_mobility(d_m = d_m)
layout(matrix(1:4,2,2))
for (i  in 1:N_geo){
plot(mobility$mob_raw$dates,mobility$mob_raw[,i+1],main = country[i],ylim = c(0,1),
xlab = '',ylab = 'prop. mobility')
lines(mobility$mob_combined_smooth$dates,mobility$mob_combined_smooth[,i+1],col='blue')
# lines(mob3[,i+1],col='red')
abline(h=1,lwd=2,col='red',lty=2)
}
## # serial interval estimate used: mean = 3.96, sd =  4.75
## # Teunis et al.
SI <- gamma_dist_EpiEstim(si_mu =  d$si_mean[si],
si_std  = d$si_std[si],
SItrunc = 30)
plot(seq(0, SI$SItrunc), SI$dist, type = "h",
lwd = 10, lend = 1, xlab = "time (days)", ylab = "frequency")
title(main = "Discrete distribution of the serial interval of COVID-19")
delta_id <- gamma_dist_EpiEstim(si_mu = mu_id ,
si_std  = .45*mu_id,
SItrunc = 50)
plot(seq(0, delta_id$SItrunc), delta_id$dist, type = "h",
lwd = 10, lend = 1, xlab = "time (days)", ylab = "frequency")
title(main = "Discrete distribution of the delay infection to death")
sum(delta_id$dist[1:7])
# delay death infection matrix
H <- matrix(0,nrow = N_days, ncol = N_days)
for (i in 1:N_days){
f <- max(c(1,i-delta_id$SItrunc))
H[i,f:i] <- rev(delta_id$dist)[((delta_id$SItrunc+1)-(i-f)):(delta_id$SItrunc+1)]
if (i>1) H[i,f:i] <-  H[i,f:i]/sum( H[i,f:i])
}
# delay SI death to death matrix
W <- matrix(0,nrow = N_days, ncol = N_days)
for (i in 1:N_days){
f <- max(c(1,i-SI$SItrunc))
W[i,f:i] <- rev(SI$dist)[((SI$SItrunc+1)-(i-f)):(SI$SItrunc+1)]
# if (i>1) H[i,f:i] <-  H[i,f:i]/sum( H[i,f:i])
}
# overall infectivity matrix
Ot <- W%*%mD
# correct infectivity when >0 case observed but no infectivity
for(i in 1:N_geo){
Ot[ which( (D[,i+1]>0) & (Ot[,i] ==0 ) ),i] <-NA
}
# matrix of mobility and delayed version
M <- as.matrix(mobility$mob_combined_smooth[,-1])
# M_D <- H %*% M
View(D)
library(knitr)
library(Hmisc)
library(EpiEstim)
library(zoo)
library(latex2exp)
opts_chunk$set(collapse = TRUE)
opts_chunk$set(fig.path='figs/', fig.keep='high',
dev=c('png'), fig.width=9, fig.height=6, cache=FALSE,
tidy=FALSE, warning=FALSE, fig.show="asis"
)
sapply(paste0('Rscript/pre_MCMC/',(list.files('Rscript/pre_MCMC/'))),FUN = source)
date_week_finishing <-  as.Date('10/05/2020',format = '%d/%m/%Y')
si <- 2
d <- readRDS(file=paste0('../inputs/data_',date_week_finishing,'.rds'))
#
country <- as.character(d$Country)
# mean sd of ditrivution infection to death
mu_id = 18.8
si_std = .45*mu_id
# d_m <- read.csv(file='../inputs/applemobilitytrends-2020-04-26.csv',stringsAsFactors = FALSE)
d_m <- read.csv(file='../inputs/google.csv',stringsAsFactors = FALSE)
# d_m needs 3 colums for "geo_type"            "region"              "transportation_type"
# +one column per dates names as 'X.2020.01.20'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# missing for apple: Algeria, China, Dominican_Republic, Ecuador, Iran, Peru, South_Korea,
#corrections to match name in ECDC data
d_m$region[which(d_m$region %in% 'United Kingdom')] <- 'United_Kingdom'
d_m$region[which(d_m$region %in% 'United States')] <- 'United_States_of_America'
d_m$region[which(d_m$region %in% 'South Korea')] <- 'South_Korea'
d_m$region[which(d_m$region %in% 'South Africa')] <- 'South_Africa'
d_m$region[which(d_m$region %in% 'Saudi Arabia')] <- 'Saudi_Arabia'
d_m$region[which(d_m$region %in% 'United Arab Emirates')] <- 'United_Arab_Emirates'
d_m$region[which(d_m$region %in% 'Dominican Republic')] <- 'Dominican_Republic'
#miss-spelled
country[-which(as.character(country) %in% as.character(d_m$region))]
# check
if (length(country[-which(country %in% d_m$region)])>0){
print('warning')
country[-which(country %in% d_m$region)]
}
# include country with data in both dataset
f1 <- which(country %in% d_m$region)
f2 <- which(d_m$region %in% country)
d_m <- d_m[f2,]
d$I_active_transmission <- d$I_active_transmission[,c(1,f1+1)]
d$D_active_transmission <- d$D_active_transmission[,c(1,f1+1)]
d$Country <- d$Country[f1]
# include dates with data in both
dates <- as.Date(substr(names(d_m[,-c(1:3)]),start = 2, stop = 11),format='%Y.%m.%d')
f1 <- which(d$I_active_transmission$dates %in% dates)
f2 <- which(dates %in% d$I_active_transmission$dates)
d_m <- d_m[,c(1,2,3,3+f2)]
d$I_active_transmission <- d$I_active_transmission[f1,]
d$D_active_transmission <- d$D_active_transmission[f1,]
# correct epi
D <- d$D_active_transmission
mD <- as.matrix(D[,-1])
I <- d$I_active_transmission
cumD <- data.frame(D$dates,apply(D[,-1],2,cumsum))
cumI <- data.frame(I$dates,apply(I[,-1],2,cumsum))
N_geo <- ncol(D)-1
N_days <- nrow(D)
country <- as.character(d$Country)
mobility <- process_mobility(d_m = d_m)
layout(matrix(1:4,2,2))
for (i  in 1:N_geo){
plot(mobility$mob_raw$dates,mobility$mob_raw[,i+1],main = country[i],ylim = c(0,1),
xlab = '',ylab = 'prop. mobility')
lines(mobility$mob_combined_smooth$dates,mobility$mob_combined_smooth[,i+1],col='blue')
# lines(mob3[,i+1],col='red')
abline(h=1,lwd=2,col='red',lty=2)
}
## # serial interval estimate used: mean = 3.96, sd =  4.75
## # Teunis et al.
SI <- gamma_dist_EpiEstim(si_mu =  d$si_mean[si],
si_std  = d$si_std[si],
SItrunc = 30)
plot(seq(0, SI$SItrunc), SI$dist, type = "h",
lwd = 10, lend = 1, xlab = "time (days)", ylab = "frequency")
title(main = "Discrete distribution of the serial interval of COVID-19")
delta_id <- gamma_dist_EpiEstim(si_mu = mu_id ,
si_std  = .45*mu_id,
SItrunc = 50)
plot(seq(0, delta_id$SItrunc), delta_id$dist, type = "h",
lwd = 10, lend = 1, xlab = "time (days)", ylab = "frequency")
title(main = "Discrete distribution of the delay infection to death")
sum(delta_id$dist[1:7])
# delay death infection matrix
H <- matrix(0,nrow = N_days, ncol = N_days)
for (i in 1:N_days){
f <- max(c(1,i-delta_id$SItrunc))
H[i,f:i] <- rev(delta_id$dist)[((delta_id$SItrunc+1)-(i-f)):(delta_id$SItrunc+1)]
if (i>1) H[i,f:i] <-  H[i,f:i]/sum( H[i,f:i])
}
# delay SI death to death matrix
W <- matrix(0,nrow = N_days, ncol = N_days)
for (i in 1:N_days){
f <- max(c(1,i-SI$SItrunc))
W[i,f:i] <- rev(SI$dist)[((SI$SItrunc+1)-(i-f)):(SI$SItrunc+1)]
# if (i>1) H[i,f:i] <-  H[i,f:i]/sum( H[i,f:i])
}
# overall infectivity matrix
Ot <- W%*%mD
# correct infectivity when >0 case observed but no infectivity
for(i in 1:N_geo){
Ot[ which( (D[,i+1]>0) & (Ot[,i] ==0 ) ),i] <-NA
}
# matrix of mobility and delayed version
M <- as.matrix(mobility$mob_combined_smooth[,-1])
# M_D <- H %*% M
View(D)
temp <- zoo::rollsum(x = D[,-1],k=7)
View(temp)
84-7
temp <- temp[seq(1,nrow(temp),7),]
View(temp)
i=1
f <- which(temp > 10)[1]
f
(f*7+1)
D$dates[(f*7+1)]
library(rmarkdown)
source(file = 'Rdata/date_input.r')
for (date_num in 1:length(dates_input)){
for (si_num in c(1,2)){
date_week_finishing <-  as.Date(dates_input[date_num],format = '%Y-%m-%d')
si <- si_num
rmarkdown::render(input = 'template_input.Rmd',
output_file = paste0('input_',date_week_finishing,'_SI_',si,'.html'))
}
}
View(Filter_incidence)
View(Ot)
N_geo
temp <- zoo::rollsum(x = D[,-1],k=7)
temp <- temp[seq(1,nrow(temp),7),]
Filter_incidence <- matrix(1,nrow(D),N_geo)
for(i in 1:N_geo){
f <- which(temp > 10)[1]
Filter_incidence[ 1:(f*7+1),i] <- NA
}
i
View(D)
